name: Test Toolkit Cleanup

on:
  schedule:
    - cron: '0 0 1 * *'  # Run monthly on the 1st
  workflow_dispatch:      # Allow manual trigger

jobs:
  analyze-test-data:
    name: Analyze Test Data
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Generate Analysis Report
        id: analysis
        run: |
          # Find unused test files
          UNUSED_TESTS=$(find src/tests -type f -name "*.test.ts" -mtime +90)
          echo "unused_tests=$UNUSED_TESTS" >> $GITHUB_OUTPUT

          # Find duplicate tests
          DUPLICATE_PATTERNS=$(./scripts/analyze-logs.sh --find-duplicates)
          echo "duplicate_tests=$DUPLICATE_PATTERNS" >> $GITHUB_OUTPUT

          # Find slow tests
          SLOW_TESTS=$(./scripts/analyze-logs.sh --find-slow-tests)
          echo "slow_tests=$SLOW_TESTS" >> $GITHUB_OUTPUT

  cleanup-artifacts:
    name: Cleanup Test Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Old Reports
        run: |
          find test-reports -type f -mtime +30 -delete
          find coverage -type f -mtime +30 -delete
          find test-logs -type f -mtime +30 -delete

      - name: Cleanup Old Backups
        run: |
          find test-setup-backups -type d -mtime +90 -exec rm -rf {} +

      - name: Optimize Storage
        run: |
          # Compress old logs
          find test-logs -type f -mtime +7 -name "*.log" -exec gzip {} \;

          # Archive old reports
          find test-reports -type f -mtime +30 -name "*.json" -exec tar -czf {}.tar.gz {} \; -exec rm {} \;

  optimize-tests:
    name: Optimize Test Suite
    needs: analyze-test-data
    runs-on: ubuntu-latest
    if: ${{ needs.analyze-test-data.outputs.slow_tests != '' }}
    steps:
      - name: Create Optimization PR
        uses: actions/github-script@v6
        with:
          script: |
            const branch = 'chore/optimize-tests'
            await exec.exec('git', ['checkout', '-b', branch])

            // Create optimization report
            const report = `# Test Optimization Report

            ## Slow Tests Detected
            ${process.env.slow_tests}

            ## Recommended Actions
            1. Review parallelization options
            2. Check for unnecessary async operations
            3. Optimize test setup/teardown
            4. Consider splitting large test suites

            ## Unused Tests
            ${process.env.unused_tests}

            ## Duplicate Test Patterns
            ${process.env.duplicate_tests}
            `

            // Create optimization task file
            await exec.exec('echo', [report, '>', 'test-optimization.md'])
            await exec.exec('git', ['add', 'test-optimization.md'])
            await exec.exec('git', ['commit', '-m', 'chore: add test optimization report'])
            await exec.exec('git', ['push', 'origin', branch])

            // Create PR
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⚡ Optimize Test Suite',
              head: branch,
              base: 'develop',
              body: report
            })

  update-config:
    name: Update Test Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Analyze Current Config
        run: |
          # Check test patterns
          PATTERNS=$(grep -r "test.ts" . --include="*.json" --include="*.config.*")

          # Check parallel execution settings
          PARALLEL=$(grep -r "maxConcurrency" . --include="*.json" --include="*.config.*")

          # Check timeouts
          TIMEOUTS=$(grep -r "timeout" . --include="*.json" --include="*.config.*")

      - name: Suggest Optimizations
        run: |
          echo "Test Pattern Recommendations:" > config-recommendations.md
          echo "Timeout Recommendations:" >> config-recommendations.md
          echo "Parallelization Recommendations:" >> config-recommendations.md

      - name: Create Config PR
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const recommendations = require('./config-recommendations.md')

            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⚙️ Update Test Configuration',
              head: 'chore/update-test-config',
              base: 'develop',
              body: recommendations
            })

  notify:
    name: Send Cleanup Report
    needs: [analyze-test-data, cleanup-artifacts, optimize-tests, update-config]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate Report
        run: |
          echo "# Test Toolkit Cleanup Report" > cleanup-report.md
          echo "## Cleanup Results" >> cleanup-report.md
          echo "- Artifacts: ${{ needs.cleanup-artifacts.result }}" >> cleanup-report.md
          echo "- Optimizations: ${{ needs.optimize-tests.result }}" >> cleanup-report.md
          echo "- Config Updates: ${{ needs.update-config.result }}" >> cleanup-report.md

      - name: Create Issue
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const report = fs.readFileSync('cleanup-report.md', 'utf8')

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🧹 Monthly Test Cleanup Report',
              body: report,
              labels: ['maintenance', 'automated', 'cleanup']
            })

      - name: Update Metrics
        run: |
          echo "test_files_cleaned=$(find test-logs -type f -mtime +30 | wc -l)" >> $GITHUB_ENV
          echo "storage_saved=$(du -sh test-logs test-reports coverage | awk '{print $1}')" >> $GITHUB_ENV

      - name: Post Summary
        run: |
          echo "### Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "* Files cleaned: ${{ env.test_files_cleaned }}" >> $GITHUB_STEP_SUMMARY
          echo "* Storage saved: ${{ env.storage_saved }}" >> $GITHUB_STEP_SUMMARY
