0name: Test Toolkit Maintenance

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday
  workflow_dispatch:      # Allow manual trigger

jobs:
  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Check for Updates
        id: ncu
        run: |
          npm install -g npm-check-updates
          NCU_OUTPUT=$(ncu)
          echo "::set-output name=updates::$NCU_OUTPUT"

      - name: Create Update PR
        if: contains(steps.ncu.outputs.updates, 'Run ncu -u to upgrade')
        uses: actions/github-script@v6
        with:
          script: |
            const branch = 'chore/update-dependencies'
            await exec.exec('git', ['checkout', '-b', branch])
            await exec.exec('ncu', ['-u'])
            await exec.exec('npm', ['install'])
            await exec.exec('git', ['config', '--global', 'user.email', 'github-actions[bot]@users.noreply.github.com'])
            await exec.exec('git', ['config', '--global', 'user.name', 'github-actions[bot]'])
            await exec.exec('git', ['commit', '-am', 'chore: update dependencies'])
            await exec.exec('git', ['push', 'origin', branch])

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚¨ÜÔ∏è Update dependencies',
              head: branch,
              base: 'develop',
              body: 'Automated dependency updates by Test Toolkit maintenance workflow'
            })

  validate-scripts:
    name: Validate Scripts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install shellcheck
        run: sudo apt-get install -y shellcheck

      - name: Validate Shell Scripts
        run: |
          for script in scripts/*.sh; do
            shellcheck "$script" || exit 1
          done

      - name: Test Script Permissions
        run: |
          for script in scripts/*.sh; do
            if [ ! -x "$script" ]; then
              echo "::error::$script is not executable"
              exit 1
            fi
          done

  check-documentation:
    name: Check Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Check Links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          folder-path: 'src/tests'

      - name: Check for Outdated Examples
        run: |
          for example in src/tests/examples/*.ts; do
            if [ -f "$example" ]; then
              last_updated=$(git log -1 --format="%at" "$example")
              current_time=$(date +%s)
              days_old=$(( (current_time - last_updated) / 86400 ))
              if [ $days_old -gt 90 ]; then
                echo "::warning::Example $example is $days_old days old"
              fi
            fi
          done

  test-coverage:
    name: Monitor Test Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Coverage
        run: npm run test:coverage

      - name: Check Coverage Trends
        run: |
          COVERAGE=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "::warning::Test coverage ($COVERAGE%) is below 80%"
          fi

  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Delete Old Artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            })

            const oldArtifacts = artifacts.artifacts.filter(artifact => {
              const createdAt = new Date(artifact.created_at)
              const now = new Date()
              const daysOld = (now - createdAt) / (1000 * 60 * 60 * 24)
              return daysOld > 7
            })

            await Promise.all(
              oldArtifacts.map(artifact =>
                github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                })
              )
            )

  notify:
    name: Send Status Report
    needs: [dependency-check, validate-scripts, check-documentation, test-coverage, cleanup]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Create Issue for Failed Checks
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v6
        with:
          script: |
            const results = {
              'dependency-check': '${{ needs.dependency-check.result }}',
              'validate-scripts': '${{ needs.validate-scripts.result }}',
              'check-documentation': '${{ needs.check-documentation.result }}',
              'test-coverage': '${{ needs.test-coverage.result }}',
              'cleanup': '${{ needs.cleanup.result }}'
            }

            const failedChecks = Object.entries(results)
              .filter(([_, result]) => result === 'failure')
              .map(([check]) => check)

            if (failedChecks.length > 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üîß Test Toolkit Maintenance Required',
                body: `The following maintenance checks failed:

                ${failedChecks.map(check => `- ${check}`).join('\n')}

                Please review the workflow run for details.`,
                labels: ['maintenance', 'automated']
              })
            }

      - name: Update Status Badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: test-toolkit-status
          filename: status.json
          label: maintenance
          message: ${{ contains(needs.*.result, 'failure') && 'üîß needs attention' || '‚úÖ healthy' }}
          color: ${{ contains(needs.*.result, 'failure') && 'red' || 'green' }}
